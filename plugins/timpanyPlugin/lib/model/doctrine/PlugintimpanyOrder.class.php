<?php

/**
 * PlugintimpanyOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PlugintimpanyOrder extends BasetimpanyOrder implements timpanyOrderInterface
{
	protected $gross_sum=null;
	
	/**
	 * create payment for order
	 * @return Payment
	 */
  public function createPayment($action)
  {
    sfContext::getInstance()->getLogger()->log('Zahlung wird angelegt', 6);
    $paymentdata = new PaypalPaymentData();
    $paymentdata->subject = 'Test Payment #' . $this->getId();
    
    $paymentdata->cancel_url = $action->generateUrl('timpany_cart', array(), true);
    $paymentdata->return_url = $action->generateUrl('payment_approve', array(), true);
    $payment = Payment::create($this->getGrossSum('de'), 'EUR', $paymentdata);
    $payment->setOrder($this);
    $payment->save();
    return $payment;
  }
  
  public function getState()
  {
  	return parent::_get('state');
  }
  
  public function getGrossSum()
  {
  	if (true or is_null($this->gross_sum)) {
	  	$this->gross_sum=0;
	    foreach ($this->getItems() as $item) {
	    	$this->gross_sum += $item->getGrossSum();
	    } 
  	}
  	return $this->gross_sum; 	
  }
  
  public function addProduct(timpanyProductInterface $product, $count=1) {
  	return $this->addItem($product, $count);
  }
  
  /**
   * add a product to the order
   * 
   * @param timpanyProductInterface $product
   * @param int                     $count
   */
  public function addItem(timpanyProductInterface $product, $count)
  {
      $itemRelation   = $this->getTable()->getRelation('Items');
      if ($this->exists()) {
        $itemCollection = $itemRelation['table']->findByOrderId($this->getId());
        $is_new_item = true;
        foreach ($itemCollection as $item) {
          if ($product->getId() === $item->getProductId()) {
            $is_new_item = false;
            break;
          }
        }
      } else {
      	$is_new_item = true;
      }
      if ($is_new_item) {
        $item = new timpanyOrderItem();
        $item->setProduct($product);
        $item->setOrder($this);
      }
      $item->setCount($item->setCount() + $count);
      $this->save();
  }
  
  /**
   * clear cart
   * 
   * FIXME: not yet implemented
   */
  public function clear()
  {
  }
  
  /**
   * set cart items
   * @param array $items
   * 
   * FIXME: not yet implemented
   */
  public function setItems($items)
  {
  }
  
  /**
   * get count of a specific product
   * @param timpanyProductInterface $product
   * 
   * @return int Count of product
   * 
   * FIXME: not yet implemented
   */
  public function getCountOfProduct(timpanyProductInterface $product)
  {
  	
  }

  /**
   * get cart items
   * @return array Array with following structure:
   *       'count'     => integer,
   *       'product'   => timpanyProductInterface,
   *       'net_sum'   => float
   *       'gross_sum' => float
   * 
   * FIXME: not yet implemented
   */
  public function getItems()
  {
  	return parent::_get('Items');
  }

  /**
   * get net sum
   * @return float
   * 
   * FIXME: not yet implemented
   */
  public function getNetSum()
  {
  	
  }
  
  /**
   * remove item from cart
   * @param string $key Key of items collection
   * FIXME: not yet implemented
   */
  public function removeItem($key)
  {
  	
  }
  
  /**
   * get count of products
   * @return int
   * 
   * FIXME: not yet implemented
   */
  public function getProductCount()
  {
  	
  }

  /**
   * get count of items
   * @return int
   * 
   * FIXME: not yet implemented
   */
  public function getItemCount()
  {
  	
  }
  
  /**
   * turn order into an array
   * 
   * @link http://www.doctrine-project.org/documentation/manual/1_1/en/working-with-models
   * @param boolean $deep         whether to include relations
   * @param boolean $prefixKey    not used
   * @return array
   * 
   * FIXME: not yet implemented
   */
  public function toArray($deep=true, $prefixKey = false)
  {
  	
  }
}
