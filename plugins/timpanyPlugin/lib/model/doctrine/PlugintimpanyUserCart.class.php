<?php

/**
 * PlugintimpanyUserCart
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PlugintimpanyUserCart extends BasetimpanyUserCart implements timpanyCartInterface
{
	public function clear()
	{
		$this->setItems(new Doctrine_Collection($this->getTable()));
	}
	
	/**
	 * get count of cart products
	 * 
	 * @return int
	 */
  public function getProductCount()
  {
  	$count = 0;
  	foreach ($this->getItems() as $item) {
  		$count += $item->getCount();
  	}
  	return $count;
  }
  
  /**
   * get count of cart items
   * 
   * @return int
   */
  public function getItemCount()
  {
  	return $this->getItems()->count();
  }
  
  /**
   * add product
   * 
   * @param timpanyProductInterface $product
   * @param int                     $count
   * 
   * @return timpanyCartInterface
   */
  public function addProduct(timpanyProductInterface $product, $count=1) {
  	foreach ($this->getItems() as $item) {
  		if ($item->getProductIdentifier() == $product->getIdentifier()) {
  			$cartItem = $item;
  			break;
  		}
  	}
  	if (isset($cartItem)) {
  		$cartItem->increaseCount($count);
  	} else {
	  	$cartItem = new timpanyCartItem();
	  	$cartItem
	  	  ->setCount($count)
	  	  ->setProductIdentifier($product->getIdentifier())
	  	  ->setProductData($product->toJson());
	  	$this->getItems()->add($cartItem);
  	}
  	return $this;
  }
  
  /**
   * get net sum
   * @return float
   */
  public function getNetSum()
  {
    $net_sum = 0;
    foreach ($this->getItems() as $item) {
      $net_sum += $item->getNetSum();
    }
    return $net_sum;
  }
  
  /**
   * get gross sum
   * @return float
   */
  public function getGrossSum($region='de')
  {
    $net_sum = 0;
    foreach ($this->getItems() as $item) {
      $net_sum += $item->getGrossSum($region);
    }
    return $net_sum;
  }
  
  /**
   * remove item from cart
   * @param timpanyProductInterface $product
   */
  public function removeItem($product_key)
  {
    $items = $this->getItems();
    unset($items[$product_key]);
    $this->setItems($items);
  }
  
  public function setItems($items)
  {
  	parent::_set('Items', $items);
  }
  
  public function getCountOfProduct(timpanyProductInterface $product)
  {
    $count = 0;
    foreach ($this->getItems() as $item) {
    	if ($item->getProductIdentifier() == $product->getIdentifier()) {
    		return $item->getCount();
    	}
    }
    return 0;
  }
  
  public function getItems()
  {
  	return parent::_get('Items');
  }
}